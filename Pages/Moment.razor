@page "/Moment"
@using LoginExample.Data
@using LoginExample.Data.Impl
@using LoginExample.Models
@inject IUserService _service;


<hr style=" border: 2px solid white" />
<br>
<div class="Moment-main" style="height: 70vh">
    <div style="position: relative; width: 100%; height: 100%; background-color: rgba(255,255,255,0.5); overflow-y: auto">
        @foreach(var moment in _moments)
        {
            <div style="display: flex; flex-direction: row; display: -webkit-flex; justify-content: center; text-align: center">
                <img src="css/image/MomentPerson.png" width="2.5%" height="2.5%">
             
                <div style="display: flex; flex-direction: column">
                    <a style="font-size: 1vw; font-family: Algerian; color:#3200f8">@moment.username</a>
                    <span style="font-size: 1vw; font-family: 'Berlin Sans FB'">@moment.time</span>
                </div>
            </div>
            <div style="display: flex; flex-direction: column; margin-top: -3%; justify-content: center; text-align: center">
                <span style="margin-top: 5%; text-align: center; font-family: 'Bell MT'; font-weight: bolder; font-size: 1vw">@moment.content</span>
                <div style="display: flex; flex-direction: row; justify-content: center; align-items: center; margin-top: 3%">
                    <p>
                        <img @onclick="() => like(moment.username,moment.time)" src=@url1 width="10%" height="60%" style="text-align: center">
                        <label style="color: black">@moment.like</label>
                    </p>
                    <p>
                        <img @onclick="() => dislike(moment.username,moment.time)" src=@url2 width="10%" height="60%" style="text-align: center">
                        <label style="color: black">@moment.dislike</label>
                    </p>
                </div>
                
                @if (show)
                {
                   <button @onclick="() => getComment(moment.username,moment.time)" style="font-size: 2vw; font-family: Forte; color: hotpink; outline: none; background: transparent; border: none">Comment</button>
                }
                else if (show == false)
                {
                    @if (comments != null)
                    {
                        @foreach (var comment1 in comments)
                            {
                                if (comment1.username.Equals(_service.getName()) && comment1.publisher.Equals(moment.username))
                                {
                                    <p>@comment1.username :  @comment1.content</p>
                                }
                            }
                        <div style="flex-direction: row; display: flex; float: left; margin-top: 3%; left: 0; right: 0; margin: auto;">
                            <input @bind="content" style="display: flex; height: 40px; width: 600px; border-radius: 1vw">
                            <button @onclick="() => comment(moment.username,moment.time)" style="margin-left: 5%; border-radius: 1vw; height: 40px; width: 200px">Submit</button>
                        </div>
                    }
                    else
                    {
                        <p>no comments were found</p>
                    }
                }
                
                </div>
            <br>
            <hr style=" border: 1px solid black" />
            <br>
        }
    </div>
</div>

<a href="/editmoment" style="display: flex; text-align: center; outline: none; background: transparent; border: none; align-items: center; justify-content: center; margin-top: 1%; "><img src="css/image/EdiMoment.png" width="2%" height="2%"></a>
<p style="justify-content: center; text-align: center; font-size: 1.2vw; font-family: Fonte; color: #4dff80">Publish</p>
<hr style=" border: 2px solid white" />

@code {
    private string url1 = "css/image/RedHeart.png";
    private string url2 = "css/image/GreenDislike.png";
    private UserData _userData = new UserDataService();
    private ChatData _chatData = new ChatDataService();
    private IList<Message> _messages = new List<Message>();
    private IList<Models.Moment> _moments = new List<Models.Moment>();
    private string content = "";
    private IList<Comment> comments = new List<Comment>();
    private bool show = true;
    
    

    protected override async Task OnInitializedAsync()
    {
        _moments = await _userData.getMoments();
        _messages = await _chatData.getAMS();
          
        
    }
    
    public async void like(string username,string time)
    {

        await _chatData.sendMessage(_service.getName(), "System", "like"+time);
        await _userData.like(username);
        _moments = await _userData.getMoments();
        
    }

    
    public async void dislike(string username,string time)
    {
        
        await _chatData.sendMessage(_service.getName(), "System", "dislike"+time);
        await _userData.dislike(username);
        _moments = await _userData.getMoments();

    }

    public async void comment(string publisher,string time)
    {
        Comment comment = new Comment()
        {
            username = _service.getName(),
            publisher = publisher,
            content = content,
            time = time
        };
        if (content!=null)
        {
            await _userData.addComment(comment);
            comments = await _userData.getComments(_service.getName(), publisher, time);
            content = ""; 
        }
         
    }

    public async void getComment(string publisher,string time)
    {
        comments = await _userData.getComments(_service.getName(), publisher, time);
        show = false;
       
        
    }
    

} 