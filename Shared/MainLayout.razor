@using LoginComponent
@using LoginExample.Authentication
@using LoginExample.Data
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
 @inject IUserService _service;


<AuthorizeView>
    
    @if (!(_service.getName().Equals("Troels Mortensen") || _service.getName().Equals("Jan Munch Pedersen") || _service.getName().Equals("Poul Væggemose") || _service.getName().Equals("Lars Bech Sørensen")))
    {
        <div class="nav">
                <NavMenu/>
                <Home/>
            </div>
    }
    
</AuthorizeView>


<div class="main">

    <div class="content px-4">
        @Body
    </div>
</div>

@code{ 

    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var user = (await AuthStat).User;
        if(!user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo($"/Login");
            // NavigationManager.NavigateTo($"/Login?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}");
        }
    }

    public void go()
    {
        try
        {
            ((CustomAuthenticationStateProvider) AuthenticationStateProvider).Logout();
            NavigationManager.NavigateTo("/Login");
        }
        catch (Exception e)
        {
            e.ToString();
        }
    }
    
}